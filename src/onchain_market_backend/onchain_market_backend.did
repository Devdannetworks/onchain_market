type BetPayload = record {
  outcome_id : nat64;
  user_id : principal;
  event_id : nat64;
  amount : nat64;
};
type BetType = variant { Binary; Multichoice };
type Error = variant {
  InvalidInput : record { msg : text };
  Authorization : record { msg : text };
  NotFound : record { msg : text };
  StorageError : record { msg : text };
};
type Event = record {
  sub_category : text;
  title : text;
  updated_at : opt nat64;
  amount_staked : opt nat64;
  event_status : EventStatus;
  close_time : text;
  bets : opt vec BetPayload;
  description : text;
  created_at : nat64;
  category : text;
  bet_type : BetType;
  event_id : nat64;
  outcome : vec Outcome;
};
type EventPayload = record {
  sub_category : text;
  title : text;
  close_time : text;
  description : text;
  created_at : nat64;
  category : text;
  bet_type : BetType;
  outcome : vec Outcome;
};
type EventStatus = variant { Open; Close; Settled };
type Outcome = record {
  outcome_id : nat64;
  odds : nat32;
  total_amount_staked : nat64;
  description : text;
  total_bets : nat64;
};
type Result = variant { Ok : nat64; Err : Error };
type Result_1 = variant { Ok : Event; Err : text };
type Result_2 = variant { Ok : Event; Err : Error };
type Result_3 = variant { Ok; Err : Error };
service : {
  calculate_total_stakes : (nat64) -> (Result) query;
  create_event : (EventPayload) -> (Result_1);
  delete_event : (nat64, principal) -> (Result_2);
  get_an_event : (nat64) -> (Result_2) query;
  list_all_events : () -> (vec Event) query;
  list_events_by_category : (text) -> (vec Event) query;
  place_bet : (BetPayload) -> (Result_3);
  update_event : (nat64, EventPayload) -> (Result_2);
  update_event_status : (nat64, EventStatus) -> (Result_2);
}
